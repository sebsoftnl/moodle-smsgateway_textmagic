<?php
/**
 * GetAvailableSenderSettingOptionsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  TextMagic
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TextMagic\Models;

use \ArrayAccess;
use \TextMagic\ObjectSerializer;

/**
 * GetAvailableSenderSettingOptionsResponse Class Doc Comment
 *
 * @category Class
 * @package  TextMagic
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAvailableSenderSettingOptionsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetAvailableSenderSettingOptionsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dedicated' => 'string[]',
        'user' => 'string[]',
        'shared' => 'string[]',
        'senderIds' => 'string[]',
        'userCarrierTwilio' => 'string[]',
        'userCarrierVonage' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dedicated' => null,
        'user' => null,
        'shared' => null,
        'senderIds' => null,
        'userCarrierTwilio' => null,
        'userCarrierVonage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dedicated' => 'dedicated',
        'user' => 'user',
        'shared' => 'shared',
        'senderIds' => 'senderIds',
        'userCarrierTwilio' => 'userCarrierTwilio',
        'userCarrierVonage' => 'userCarrierVonage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dedicated' => 'setDedicated',
        'user' => 'setUser',
        'shared' => 'setShared',
        'senderIds' => 'setSenderIds',
        'userCarrierTwilio' => 'setUserCarrierTwilio',
        'userCarrierVonage' => 'setUserCarrierVonage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dedicated' => 'getDedicated',
        'user' => 'getUser',
        'shared' => 'getShared',
        'senderIds' => 'getSenderIds',
        'userCarrierTwilio' => 'getUserCarrierTwilio',
        'userCarrierVonage' => 'getUserCarrierVonage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dedicated'] = isset($data['dedicated']) ? $data['dedicated'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['shared'] = isset($data['shared']) ? $data['shared'] : null;
        $this->container['senderIds'] = isset($data['senderIds']) ? $data['senderIds'] : null;
        $this->container['userCarrierTwilio'] = isset($data['userCarrierTwilio']) ? $data['userCarrierTwilio'] : null;
        $this->container['userCarrierVonage'] = isset($data['userCarrierVonage']) ? $data['userCarrierVonage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dedicated'] === null) {
            $invalidProperties[] = "'dedicated' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['shared'] === null) {
            $invalidProperties[] = "'shared' can't be null";
        }
        if ($this->container['senderIds'] === null) {
            $invalidProperties[] = "'senderIds' can't be null";
        }
        if ($this->container['userCarrierTwilio'] === null) {
            $invalidProperties[] = "'userCarrierTwilio' can't be null";
        }
        if ($this->container['userCarrierVonage'] === null) {
            $invalidProperties[] = "'userCarrierVonage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dedicated
     *
     * @return string[]
     */
    public function getDedicated()
    {
        return $this->container['dedicated'];
    }

    /**
     * Sets dedicated
     *
     * @param string[] $dedicated Array of dedicated number strings.
     *
     * @return $this
     */
    public function setDedicated($dedicated)
    {
        $this->container['dedicated'] = $dedicated;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string[]
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string[] $user Array of verified account phone numbers (currently only one).
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return string[]
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param string[] $shared Array of shared number strings.
     *
     * @return $this
     */
    public function setShared($shared)
    {
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets senderIds
     *
     * @return string[]
     */
    public function getSenderIds()
    {
        return $this->container['senderIds'];
    }

    /**
     * Sets senderIds
     *
     * @param string[] $senderIds Array of alphanumeric sender IDs.
     *
     * @return $this
     */
    public function setSenderIds($senderIds)
    {
        $this->container['senderIds'] = $senderIds;

        return $this;
    }

    /**
     * Gets userCarrierTwilio
     *
     * @return string[]
     */
    public function getUserCarrierTwilio()
    {
        return $this->container['userCarrierTwilio'];
    }

    /**
     * Sets userCarrierTwilio
     *
     * @param string[] $userCarrierTwilio Array of alphanumeric sender IDs.
     *
     * @return $this
     */
    public function setUserCarrierTwilio($userCarrierTwilio)
    {
        $this->container['userCarrierTwilio'] = $userCarrierTwilio;

        return $this;
    }

    /**
     * Gets userCarrierVonage
     *
     * @return string[]
     */
    public function getUserCarrierVonage()
    {
        return $this->container['userCarrierVonage'];
    }

    /**
     * Sets userCarrierVonage
     *
     * @param string[] $userCarrierVonage Array of alphanumeric sender IDs.
     *
     * @return $this
     */
    public function setUserCarrierVonage($userCarrierVonage)
    {
        $this->container['userCarrierVonage'] = $userCarrierVonage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


